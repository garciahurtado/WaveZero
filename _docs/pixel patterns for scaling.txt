Horizontal (upscaling)
----------------------

From 100% to 200%:

100 + ...

12.5: 	1111211
25:		1121
37.5:	112112111
50:		12
62.5:	2122121221221212
75:		2122
87.5:	222212221

----

FINAL:

raw_patterns = {
    0.125: [0, 0, 0, 0, 1, 0, 0, 0],  # 12.5%
    0.250: [0, 0, 1, 0, 0, 0, 1, 0],  # 25%
    0.375: [0, 0, 1, 0, 0, 1, 0, 1],  # 37.5%
    0.500: [0, 1, 0, 1, 0, 1, 0, 1],  # 50% scaling
    0.625: [0, 1, 1, 0, 1, 0, 1, 1],  # 62.5%
    0.750: [0, 1, 1, 1, 0, 1, 1, 1],  # 75% - works
    0.875: [1, 1, 1, 1, 0, 1, 1, 1],  # 87.5%
    1.0: [1, 1, 1, 1, 1, 1, 1, 1],  # No scaling
    1.250: [1, 2, 1, 1, 1, 2, 1, 1],  # 1.25x
    1.500: [2, 1, 2, 1, 2, 1, 2, 1],  # 1.5x scaling
    2.0: [2, 2, 2, 2, 2, 2, 2, 2],  # 2x scaling
    2.500: [3, 2, 3, 2, 3, 2, 3, 2],  # 2x scaling
    3.0: [3, 3, 3, 3, 3, 3, 3, 3],  # 3x scaling
    3.500: [4, 3, 4, 3, 4, 3, 4, 3],  # 3.5x scaling
    4.0: [4, 4, 4, 4, 4, 4, 4, 4],  # 4x scaling
    4.500: [5, 4, 5, 4, 5, 4, 5, 4],  # 4.5x scaling
    5.0: [5, 5, 5, 5, 5, 5, 5, 5],  # 5x scaling
    8.0: [8, 8, 8, 8, 8, 8, 8, 8],  # 8x scaling
    16.0: [16, 16, 16, 16, 16, 16, 16, 16],  # 8x scaling
}

OLDER:

"""
        Scaling Patterns ----------------------------------
        These buffers will be used to double horizontal pixels at set intervals, in order to implement upscaling
        The data will be sent to the pixel_out DMA count field. from another channel with a ring buffer of
        size = len(pattern)
        """

h_patterns_int = [
    [1, 1, 1, 1, 1, 1, 1, 1],       # 0s don't work at the moment
    [1, 1, 1, 1, 2, 1, 1, 1],       # 12.5%
    [1, 1, 2, 1, 1, 1, 2, 1],       # 25%
    [1, 1, 2, 1, 1, 2, 1, 2],       # 37.5%
    [1, 2, 1, 2, 1, 2, 1, 2],       # 50%
    [2, 1, 2, 2, 1, 2, 1, 2],       # 62.5%
    [2, 1, 2, 2, 2, 1, 2, 2],       # 75%
    [2, 2, 2, 2, 1, 2, 2, 2],       # 87.5%
    [2, 2, 2, 2, 2, 2, 2, 2],       # 100%
    [2, 2, 2, 2, 3, 2, 2, 2],       # 112.5%
    [2, 2, 3, 2, 2, 2, 3, 2],       # 135%
    [2, 2, 3, 2, 2, 3, 2, 3],       # 137.5%
    [2, 3, 2, 3, 2, 3, 2, 3],       # 150%
    [3, 2, 3, 3, 2, 3, 2, 3],       # 162.5%
    [3, 2, 3, 3, 3, 2, 3, 3],       # 175%
    [3, 3, 3, 3, 2, 3, 3, 3],       # 187.5%
    [3, 3, 3, 3, 3, 3, 3, 3],       # 200%
    [3, 3, 3, 3, 4, 3, 3, 3],       # 212.5%
    [3, 3, 4, 3, 3, 3, 4, 3],       # 235%
    [3, 3, 4, 3, 3, 4, 3, 4],       # 237.5%
    [3, 4, 3, 4, 3, 4, 3, 4],       # 250%
    [4, 3, 4, 4, 3, 4, 3, 4],       # 262.5%
    [4, 3, 4, 4, 4, 3, 4, 4],       # 275%
    [4, 4, 4, 4, 3, 4, 4, 4],       # 287.5%
    [4, 4, 4, 4, 4, 4, 4, 4]        # 300%
]
self.h_patterns_int = h_patterns_int

v_patterns_down_int = [
    [1, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 1, 0, 0, 0],  # 12.5%
    [0, 0, 1, 0, 0, 0, 1, 0],  # 25%
    [0, 0, 1, 0, 0, 1, 0, 1],  # 37.5%
    [0, 1, 0, 1, 0, 1, 0, 1],  # 50%
    [1, 0, 1, 1, 0, 1, 0, 1],  # 62.5%
    [1, 0, 1, 1, 1, 0, 1, 1],  # 75%
    [1, 1, 1, 1, 0, 1, 1, 1],  # 87.5%
    [1, 1, 1, 1, 1, 1, 1, 1]   # 100%
]