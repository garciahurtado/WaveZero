# Code generated by font_to_py.py.
# Font: m42.TTF Char set: ABCDEFGHIJKLMNOPQRSTUVWXYZ
# Cmd: .\font_to_py.py .\source\m42.TTF 9 m42.py -c ABCDEFGHIJKLMNOPQRSTUVWXYZ
version = '0.42'

def height():
    return 9

def baseline():
    return 9

def max_width():
    return 18

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 63

def max_ch():
    return 90

_font =\
b'\x0c\x00\x7f\xc0\xff\xe0\xe0\xe0\x0f\xe0\x0f\xe0\x0f\xc0\x00\x00'\
b'\x0f\x00\x0f\x00\x0e\x00\x1f\x80\x1f\x80\x3d\xc0\x3d\xc0\x7d\xe0'\
b'\x78\xe0\x7f\xe0\xff\xf0\xe0\x70\x0e\x00\xff\xe0\xff\xf0\xe0\x70'\
b'\xff\xe0\xff\xf0\xff\xf0\xe0\x70\xff\xf0\xff\xe0\x0e\x00\x7f\xe0'\
b'\xff\xf0\xe0\x70\xe0\x00\xe0\x00\xe0\x00\xe0\x70\xff\xf0\x7f\xe0'\
b'\x0e\x00\xff\xe0\xff\xf0\xe0\x70\xe0\x70\xe0\x70\xe0\x70\xe0\x70'\
b'\xff\xf0\xff\xe0\x0e\x00\xff\xf0\xff\xf0\xe0\x00\xff\xe0\xff\xe0'\
b'\xff\xe0\xe0\x00\xff\xf0\xff\xf0\x0e\x00\xff\xf0\xff\xf0\xe0\x00'\
b'\xff\xe0\xff\xe0\xff\xe0\xe0\x00\xe0\x00\xe0\x00\x0e\x00\x7f\xf0'\
b'\xff\xf0\xe0\x00\xe3\xf0\xe3\xf0\xe3\xf0\xe0\x70\xff\xf0\x7f\xe0'\
b'\x0e\x00\xe0\x70\xe0\x70\xe0\x70\xff\xf0\xff\xf0\xff\xf0\xe0\x70'\
b'\xe0\x70\xe0\x70\x05\x00\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\x0e'\
b'\x00\x00\x70\x00\x70\x00\x70\x00\x70\xe0\x70\xe0\x70\xe0\x70\xff'\
b'\xf0\x7f\xe0\x0e\x00\xe0\x70\xe1\xf0\xef\xc0\xff\x00\xff\x00\xff'\
b'\x00\xef\xc0\xe1\xf0\xe0\x70\x0e\x00\xe0\x00\xe0\x00\xe0\x00\xe0'\
b'\x00\xe0\x00\xe0\x00\xe0\x00\xff\xf0\xff\xf0\x10\x00\xfc\x7e\xfc'\
b'\x7e\xfe\xfe\xfe\xfe\xff\xfe\xef\xde\xef\xde\xe3\x9e\xe3\x9e\x0e'\
b'\x00\xf8\x70\xfc\x70\xfe\x70\xff\x70\xff\xf0\xef\xf0\xe3\xf0\xe1'\
b'\xf0\xe0\xf0\x0e\x00\x7f\xe0\xff\xf0\xe0\x70\xe0\x70\xe0\x70\xe0'\
b'\x70\xe0\x70\xff\xf0\x7f\xe0\x0e\x00\xff\xe0\xff\xf0\xe0\x70\xe0'\
b'\x70\xff\xf0\xff\xf0\xff\xe0\xe0\x00\xe0\x00\x0f\x00\x7f\xe0\xff'\
b'\xf0\xe0\x70\xe0\x70\xe1\xf0\xe1\xf0\xe1\xf0\xff\xfc\x7f\xfc\x0e'\
b'\x00\xff\xe0\xff\xf0\xe0\x70\xe0\x70\xff\xf0\xff\xf0\xff\xe0\xe0'\
b'\x70\xe0\x70\x0e\x00\x7f\xf0\xff\xf0\xe0\x00\xff\xe0\xff\xf0\x7f'\
b'\xf0\x00\x70\xff\xf0\xff\xe0\x0e\x00\xff\xf0\xff\xf0\x0f\x00\x0f'\
b'\x00\x0f\x00\x0f\x00\x0f\x00\x0f\x00\x0f\x00\x0e\x00\xe0\x70\xe0'\
b'\x70\xe0\x70\xe0\x70\xe0\x70\xe0\x70\xe0\x70\xff\xf0\x7f\xe0\x0e'\
b'\x00\xe0\x70\xe0\x70\x78\xe0\x78\xe0\x7d\xe0\x3d\xc0\x3d\xc0\x1f'\
b'\x80\x1f\x80\x12\x00\xe1\xc7\x80\xe1\xc7\x80\x7b\xef\x00\x7b\xef'\
b'\x00\x7f\xff\x00\x3f\x7e\x00\x3f\x7e\x00\x1e\x3c\x00\x1e\x3c\x00'\
b'\x0e\x00\xe0\x70\xf8\xf0\x7d\xe0\x3f\xc0\x3f\xc0\x3f\xc0\x7d\xe0'\
b'\xf8\xf0\xe0\x70\x0e\x00\xe0\x70\xf8\xf0\x7d\xe0\x3f\xc0\x3f\xc0'\
b'\x1f\x80\x0f\x00\x0f\x00\x0f\x00\x0e\x00\xff\xf0\xff\xf0\x01\xf0'\
b'\x0f\xc0\x3f\xc0\x3f\x00\xfc\x00\xff\xf0\xff\xf0'

_index =\
b'\x00\x00\x00\x00\x00\x00\x14\x00\x28\x00\x3c\x00\x50\x00\x64\x00'\
b'\x78\x00\x8c\x00\xa0\x00\xb4\x00\xbf\x00\xd3\x00\xe7\x00\xfb\x00'\
b'\x0f\x01\x23\x01\x37\x01\x4b\x01\x5f\x01\x73\x01\x87\x01\x9b\x01'\
b'\xaf\x01\xc3\x01\xe0\x01\xf4\x01\x08\x02\x1c\x02'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 63 + 1) if oc >= 63 and oc <= 90 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 9
    return _mvfont[doff + 2:next_offs], 9, width

